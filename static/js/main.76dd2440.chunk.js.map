{"version":3,"sources":["components/index.jsx","components/utils/option.jsx","components/quiz.jsx","components/utils/shuffle.js","components/queries/queries.js","App.js","reportWebVitals.js","index.js"],"names":["useQuery","require","global","fetch","FLAG_QUERY","Flags","loading","error","data","countries","QuizOption","props","className","Form","Check","label","name","value","type","id","onChange","function","checked","Quiz","useState","cur","setCur","score","setScore","isChecked","setChecked","cycle","e","correct","target","setTimeout","random","Math","floor","length","flag","emoji","selections","Set","size","add","selectionsArr","Array","from","array","i","j","temp","shuffleArray","buildSelections","list","map","country","class","onClick","GET_FLAGS","gql","module","exports","client","ApolloClient","uri","cache","InMemoryCache","App","Container","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76dd2440.chunk.js","sourcesContent":["import React from 'react';\nimport Quiz from './quiz';\nconst { useQuery } = require(\"@apollo/client\");\nglobal.fetch = require(\"node-fetch\");\nconst FLAG_QUERY = require('./queries/queries')\n\nexport default function Flags() {\n  const { loading, error, data } = useQuery(FLAG_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error with API</p>;\n\n  return (\n    <div>\n      <Quiz countries={data.countries}/>\n    </div>\n  );\n}\n","import { Form } from 'react-bootstrap';\n\nexport default function QuizOption(props){\n  return(\n    <div key={props.name} className=\"mb-3\">\n      <Form.Check \n        label={props.name}\n        value={props.name}\n        type='radio'\n        id={props.name}\n        onChange={props.function}\n        checked={props.checked}\n      />\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport buildSelections from './utils/shuffle'\nimport QuizOption from './utils/option'\n\nexport default function Quiz(props){\n  const [cur, setCur] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isChecked, setChecked] = useState(false);\n\n  const addPoints = () => setScore(score+1)\n\n  const cycle = (e) => {\n    const selected = e.target.value\n    const correct = (selected === countries[cur].name)\n\n    setTimeout(() => {\n        // Add score if user picked correctly\n        if (correct) addPoints()\n        // Reset boxes\n        setChecked(false)\n        // Pick another random flag\n        const random = Math.floor(Math.random() * countries.length)\n        setCur(random)\n    }, 300)\n  }\n\n  const countries = props.countries\n  const flag = countries[cur].emoji\n  const selections = buildSelections(countries, cur)\n  const list =\n  <div>\n  {selections.map((country) =>\n      <QuizOption name={country.name} function={cycle} checked={isChecked}/>\n  )}\n  </div>\n\n  return(\n    <div>\n      {`Score - ${score}`}\n      <div>\n        <h1>\n          {flag}\n        </h1>\n        <h4>\n          What country is this?\n        </h4>\n      </div>\n      {list}\n      <button class=\"skip\" onClick={cycle}>\n        Skip\n      </button>\n    </div>\n  );\n}","export default function buildSelections(countries, cur) {\n  function shuffleArray(array) {\n    /* Durstenfeld Shuffle */\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n  const selections = new Set([countries[cur]]);\n  // fill with random countries\n  while (selections.size < 5) {\n    const random = Math.floor(Math.random() * countries.length);\n    selections.add(countries[random]);\n  }\n  const selectionsArr = Array.from(selections);\n  shuffleArray(selectionsArr);\n  return selectionsArr;\n}\n","const { gql } = require(\"@apollo/client\");\n\nconst GET_FLAGS = gql`\n  {\n    countries {\n      name\n      emoji\n    }\n  }\n`;\n\nmodule.exports = GET_FLAGS;\n","import \"./App.css\";\nimport React from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Flags from \"./components/index\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Container className=\"container\">\n          <Row>\n            <Col></Col>\n            <Col>\n              <div id=\"box\">\n                <h2>Alec's Flag Quiz ðŸ¤“</h2>\n                <Flags />\n              </div>\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}