{"version":3,"sources":["components/QuizContainer.jsx","components/queries/queries.js","components/QuizChoice.jsx","components/Quiz.jsx","components/utils/shuffle.js","App.js","reportWebVitals.js","index.js"],"names":["useQuery","require","QuizContainer","FLAG_QUERY","loading","error","data","countries","global","fetch","GET_FLAGS","gql","QuizChoice","props","className","Form","Check","label","name","value","type","id","onChange","function","checked","Quiz","useState","countryIndex","setcountryIndex","choices","setChoices","score","setScore","isChecked","setChecked","result","setResult","flag","emoji","checkAnswer","e","target","cycle","setTimeout","random","Math","floor","length","useEffect","list","cur","selections","Set","size","add","selectionsArr","Array","from","array","i","j","temp","shuffleArray","buildSelections","map","country","onClick","countryAPI","api","client","ApolloClient","uri","cache","InMemoryCache","App","Container","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cabeb7a9.chunk.js","sourcesContent":["import React from 'react';\nimport Quiz from './Quiz';\nimport FLAG_QUERY from './queries/queries'\nconst { useQuery } = require(\"@apollo/client\");\nglobal.fetch = require(\"node-fetch\");\n\n\nexport default function QuizContainer() {\n  const { loading, error, data } = useQuery(FLAG_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error with API</p>;\n\n  return (\n    <div>\n      <h2>Alec's Flag Quiz ðŸ¤“</h2>\n      <Quiz countries={data.countries}/>\n    </div>\n  );\n}\n","const { gql } = require(\"@apollo/client\");\n\nconst GET_FLAGS = gql`\n  {\n    countries {\n      name\n      emoji\n    }\n  }\n`;\n\nexport default GET_FLAGS;\n","import { Form } from 'react-bootstrap';\n\nexport default function QuizChoice(props){\n  return(\n    <div key={props.name} className=\"mb-3\">\n      <Form.Check \n        label={props.name}\n        value={props.name}\n        type='radio'\n        id={props.name}\n        onChange={props.function}\n        checked={props.checked}\n      />\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport buildSelections from './utils/shuffle'\nimport QuizChoice from './QuizChoice'\n\nexport default function Quiz(props){\n  const [countryIndex, setcountryIndex] = useState(0);\n  const [choices, setChoices] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isChecked, setChecked] = useState(false);\n  const [result, setResult] = useState(\"\");\n\n  const countries = props.countries\n  const flag = countries[countryIndex].emoji\n\n  const addPoints = amount => setScore(score+amount)\n\n  const checkAnswer = (e) => {\n    const selected = e.target.value\n    const correct = (selected === countries[countryIndex].name)\n    // Add score if user picked correctly\n    if (correct){\n      addPoints(1)\n      setResult(\"Correct\")\n    }\n    else{\n      setResult(\"Wrong\")\n    }\n    cycle()\n  }\n\n  const cycle = () => {\n    setTimeout(() => {\n        // Reset check and result for next question\n        setChecked(false)\n        setResult(\"\")\n        // Pick another random flag\n        const random = Math.floor(Math.random() * countries.length)\n        setcountryIndex(random)\n    }, 800)\n  }\n\n  // Build new selections on country change\n  useEffect(() => {\n    const selections = buildSelections(countries, countryIndex)\n    const list =\n      selections.map((country) =>\n          <QuizChoice name={country.name} function={checkAnswer} checked={isChecked}/>\n      )\n    setChoices(list)\n  },[countryIndex])\n\n  return(\n    <div>\n      {`Score - ${score}`}\n      <div>\n        <h1>\n          {flag} {result}\n        </h1>\n        <h4>\n          What country is this?\n        </h4>\n      </div>\n      {choices}\n      <button className=\"skip\" onClick={cycle}>\n        Skip\n      </button>\n    </div>\n  );\n}","export default function buildSelections(countries, cur) {\n  function shuffleArray(array) {\n    /* Durstenfeld Shuffle */\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n  const selections = new Set([countries[cur]]);\n  // fill with random countries\n  while (selections.size < 5) {\n    const random = Math.floor(Math.random() * countries.length);\n    selections.add(countries[random]);\n  }\n  const selectionsArr = Array.from(selections);\n  shuffleArray(selectionsArr);\n  return selectionsArr;\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport QuizContainer from \"./components/QuizContainer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst countryAPI = require(\"./config.json\").api;\n\nconst client = new ApolloClient({\n  uri: countryAPI,\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Container className=\"container\">\n          <Row>\n            <Col></Col>\n            <Col>\n              <div id=\"box\">\n                <QuizContainer />\n              </div>\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}